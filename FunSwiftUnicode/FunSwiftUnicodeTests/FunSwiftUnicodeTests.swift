//
//  FunSwiftUnicodeTests.swift
//  FunSwiftUnicodeTests
//
//  Created by Andrew McKnight on 1/28/19.
//  Copyright ¬© 2019 Two Ring Software. All rights reserved.
//

import XCTest

class FunSwiftUnicodeTests: XCTestCase {
    func testUnicode() {
        ////////////////
        // Lookalikes //
        ////////////////
        
        //
        // ligatures
        //
        
        // ligatured ff U+FB00 Ô¨Ä
        let vpnTrafficPort = 1
        let vpnTraÔ¨ÄicPort = 2
        
        // ligatured fi U+FB01 Ô¨Å
        let vpnTrafÔ¨ÅcPort = 3
        
        // ligatured ffi U+FB03 Ô¨É
        let vpnTraÔ¨ÉcPort = 4
        
        // quick, what values does `ports` contain?
        let ports = [vpnTraÔ¨ÄicPort, vpnTraÔ¨ÉcPort, vpnTrafficPort, vpnTrafÔ¨ÅcPort]
        
        //
        // characters
        //
        
        // given lhs is, in fact, < rhs...
        let zero = 0
        let one = 1
        
        // small less-than sign U+FE64 Ôπ§
        let zeroÔπ§one = true
        if (zeroÔπ§one) {
            print("Look ma!")
        }
        
        // fullwidth less-than sign U+FF1C Ôºú
        let zeroÔºúone = false
        if (zeroÔºúone) {
            print("No hands?")
        }
        
        // quick, what values does `results` contain?
        let results = [zeroÔºúone, zero<one, zeroÔπ§one]
        
        //
        // Roman numerals U+2160...U+217F
        // ‚Ö†, ‚Ö°, ‚Ö¢, ‚Ö£, ‚Ö§, ‚Ö•, ‚Ö¶, ‚Öß, ‚Ö®, ‚Ö©, ‚Ö™, ‚Ö´, ‚Ö¨, ‚Ö≠, ‚ÖÆ, ‚ÖØ,
        // ‚Ö∞, ‚Ö±, ‚Ö≤, ‚Ö≥, ‚Ö¥, ‚Öµ, ‚Ö∂, ‚Ö∑, ‚Ö∏, ‚Öπ, ‚Ö∫, ‚Öª, ‚Öº, ‚ÖΩ, ‚Öæ, ‚Öø
        //
        
        let coreData = 1
        let ‚ÖΩoreData = 2
        let core‚ÖÆata = 3
        let ‚ÖΩore‚ÖÆata = 4
        
        // what are the values in `allTheData`?
        let allTheData = [core‚ÖÆata, ‚ÖΩore‚ÖÆata, ‚ÖΩoreData, coreData]
        
        // as if I's, 1's and l's aren't bad enough...
        // the value is the amount of unicode characters in the name...
        // can you guess which characters they are for each?
        let Il1ll1I1I11l = 0
        let Il1ll1‚Ö†1I11‚Öº = 2
        let ‚Ö†l1ll1I1I11l = 1
        let ‚Ö†l1ll1‚Ö†1‚Ö†11l = 3
        
        //
        // Greek U+0370...U+03FF (many omitted that resemble no english letter)
        // Œë, Œí, Œï, Œñ, Œó, Œô, Œö, Œú, Œù, Œü, Œ°, Œ§, Œ•, Œß, ŒΩ, Œø
        //
        
        // same game, new name
        let SPANIKOPITA = 0
        let SPŒëNIKOPITA = 1
        let SPANIKOPITŒë = 1
        let SPŒëNIŒöŒüPITA = 3
        let SPANIKŒüŒ°ITA = 2
        let SPANIKOŒ°ITA = 1
        let SPŒëNIKOPITŒë = 2
        let SPANŒôKOŒ°ITŒë = 3
        let SPANIKŒüPITA = 1
        
        //
        // full-width characters U+FF10...U+FFE5
        //
        
        // mimicking an if statement
        func iÔΩÜÔΩÉond(_: () -> ()) {}
        func cond() -> Bool { return true }
        iÔΩÜÔΩÉond() {}
        if cond() {}
        
        // mimicking an empty catch block
        func catchÔΩõÔΩù() {
            print("I'm in ur codez.")
        }
        // ...
        do {
            // `try` some stuff? better not `throw`...
        }; let error = catchÔΩõÔΩù
        // ...
        error()
        
        //
        // greek question mark U+037E Õæ
        //
        
        func innocent() { print("What,") }
        func function() { print("me worry?") }
        func innocentÔºàÔºâÕæfunction() { print("üí£") }
        innocent () ;function()
        innocentÔºàÔºâÕæfunction()
        
        //////////////
        // Noseeums //
        //////////////
        
        // zero width non-joiner U+200C ‚Äå
        // NOTE: bug in Xcode's source editor. Previously, I pasted the character onto the end of the comment, like the one right above this. Try arrowing past the end of the comment‚Äìit goes to the beginning of the line before continuing to the next one below! I fixed this by pasting all the invisible characters between arrows like so (nothing in between these!) -><-
        
        // Note: zero width joiner U+200D ->‚Äç<- breaks FiraCode ligature of the arrow on the left
        
        // normal spelling
        let spacedOut = 0
        
        // zero width joiner U+200D ->‚Äç<-
        let spaced‚ÄçOut = 1
        
        // zero width non-joiner U+200C ->‚Äå<-
        let spaced‚ÄåOut = 2
        
        // zero width space u+200B ->‚Äã<-
        let spaced‚ÄãOut = 3
        
        // you know the drill by now...
        let values = [spacedOut, spaced‚ÄçOut, spaced‚ÄåOut, spaced‚ÄãOut]
        
        ///////////
        // Emoji //
        ///////////
        
        // let's make our country variables emoji!
        let üá¶üá© = "Andorra"
        let üáßüá™ = "Belgium"
        let üáπüá© = "Chad"
        let üá¨üá≥ = "Guinea"
        let üáÆüá™ = "Ireland"
        let üá®üáÆ = "Ivory Coast"
        let üá∞üáº = "Kuwait"
        let üá≤üá± = "Mali"
        let üá∑üá¥ = "Romania"
        let üá∏üá∞ = "Slovakia"
        let üá∏üáÆ = "Slovenia"
        let üá∏üá© = "Sudan"
        let üá¶üá™ = "UAE"
        let üá™üá≠ = "Western Sahara"
        
        // which flag is where now?
        let countries = [üáßüá™, üáπüá©, üá∑üá¥, üá¶üá©, üá≤üá±, üá¨üá≥, üá™üá≠, üá∏üá©, üá¶üá™, üá∞üáº, üá∏üá∞, üá∏üáÆ, üáÆüá™, üá®üáÆ]
        
        ///////////
        // Zalgo //
        ///////////
        
        func cÕÄoÃäÃΩÃàÕ≠Ã§ÕôÃ†ÃûmÕïÃÆÕìÕñÃÆÕéÃ≤mÃõÃ™ÕñÃòÃùÃÆÃπaÕÆÃÇÕ¨Õ´nÕ≠ÕèdMÕ©ÕØÃâÃÇÕíÃØÕôÃØÃÆÃ≤eOÕêÕóÃ©ÃúhÃ∂DÃ•ÕîÕôaÃÖÃéÕÉÃ°Ã¶ÕéÃªrÃÖÃΩÕòkLÕ≠ÃêÕ´ÃÜÕÆÕ†ÕìÃ∫Ã£ÃòÃôoÃöÕõÕØ“âÃûÃ´Ã±rd() { print("Go forÕåÃÜÃ¶Ãüth andÃçÕÑÕçÃº obfuÃΩÃãÃøÃ†Ã∫ÕÖsÕ£ÕÆÃôÕàcÃÄaÃçÃÉÃÅÃÄÃìÃôÃüÃÆÃñÃ©teÕ¢Õû!ÕÇÕêÃÖÃÅÕäÃÅÕßÃΩÃøÃÄÃìÕ£Ã¥ÕùÃ∂Ã•ÕâÃπÃôÃ¨Ã•ÕàÃòÕçÃñÃ£Ã∞") }
        cÕÄoÃäÃΩÃàÕ≠Ã§ÕôÃ†ÃûmÕïÃÆÕìÕñÃÆÕéÃ≤mÃõÃ™ÕñÃòÃùÃÆÃπaÕÆÃÇÕ¨Õ´nÕ≠ÕèdMÕ©ÕØÃâÃÇÕíÃØÕôÃØÃÆÃ≤eOÕêÕóÃ©ÃúhÃ∂DÃ•ÕîÕôaÃÖÃéÕÉÃ°Ã¶ÕéÃªrÃÖÃΩÕòkLÕ≠ÃêÕ´ÃÜÕÆÕ†ÕìÃ∫Ã£ÃòÃôoÃöÕõÕØ“âÃûÃ´Ã±rd()
    }
}
